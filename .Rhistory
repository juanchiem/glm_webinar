family = binomial(link = 'logit'),
weights = n,         # informamos el nro de ensayos de cada fila
data=df_sum_prop)
library(patchwork)
p1 + p2 + p3
plot_model(m1, type='pred', show.data=T, terms='horas')
tab_model(m1,m2, m3)
summary(m1)
odds_ratio_h = exp(m1$coefficients[-1])
odds_ratio_h
# 2.07554 --- o sea que cada hora de estudio duplica la chance de aprobar
# como vimos en la tab_model(m1)
tab_model(m1)
(odds_ratio_h - 1)*100
(odds_ratio_h - 1)*100
testOutliers(m1)
library(DHARMa)
testOutliers(m1)
testDispersion(m1)
simulationOutput <- simulateResiduals(fittedModel = m1)
plot(simulationOutput)
pacman::p_load(pscl)
pR2(m1)
predict(m1,                           # modelo que ajustamos
newdata= data.frame(horas=1), # que valor/nivel de X
type="response")              # probabilidad
# maracuya <- "https://raw.githubusercontent.com/juanchiem/agro_data/master/maracuya_roug.txt"
# raw <- rio::import(maracuya, header=TRUE) %>% tibble
raw <- rio::import("david/maracuya_geno.txt", header = TRUE) %>% tibble
raw <- rio::import("david/maracuya_geno.txt", header=TRUE) %>% tibble
raw <- rio::import("david/maracuya_geno.txt", header=TRUE) %>% tibble
dat <- raw %>%
# dplyr::select(-inc) %>%
# rio::export(file = "david/maracuya_roug.txt")
mutate_at(vars(geno, bk), as.factor) %>%
mutate(inc_prop=dis_plants/n_plants)  # %>%
dat %>%
ggplot() +
aes(x=days, y=inc_prop, col=geno, shape=bk)+
geom_point()+
geom_line(aes(group=interaction(bk,geno)))
# solo una evaluación a los 60 dias
dat1 <- dat %>%
filter(days %in% c(60))
# solo una evaluación a los 90 dias
dat2 <- dat %>%
filter(days %in% c(90))
# Dos evaluaciones: a los 60 y 90 dias
dat3 <- dat %>%
filter(days %in% c(60, 90)) # %>%
dat1
dat1 %>%
ggplot() +
aes(x=geno, y=inc_prop) +
geom_jitter(alpha=.5, width=.02)
mod1 <- glmer(
inc_prop ~ geno + (1|bk), # bloque como efecto aleatorio
weights=n_plants,
family="binomial",
data=dat1)
car::Anova(mod1)
summary(mod1)
tab_model(mod1)
em1 <- emmeans(mod1, ~ geno, type="response")
res1 <- cld(em1, Letters = letters, alpha = .05, type = "response")
knitr::kable(res1)
dat2 %>%
ggplot() +
aes(x=geno, y=inc_prop) +
geom_point()
mod2 <- glmer(
inc_prop ~ geno + (1|bk),
weights=n_plants,
family="binomial",
data=dat2)
car::Anova(mod2)
summary(mod2)
tab_model(mod2)
tab_model(mod2)
plot_model(mod1, type='pred', show.data=T)
em2 <- emmeans(mod2, ~ geno, type="response")
res2 <- cld(em2, Letters = letters, alpha = .05, type = "response")
knitr::kable(res2)
plot_model(mod2, type='pred', show.data=T)
summary(mod2)
knitr::kable(res2)
0.37/(1-0.37)
0.15/(1-0.15)
odds_A = 0.37/(1-0.37)
odds_B = 0.15/(1-0.15)
odds_B/odds_A
odds_A
log(odds_A) - log(odds_A)
log(odds_A) - log(odds_A)
log(odds_B) - log(odds_A)
exp(log(odds_B) - log(odds_A) )
summary(mod2)
odds_A = 0.37/(1-0.37)
odds_B = 0.15/(1-0.15)
odds_B/odds_A
dat %>%
ggplot() +
aes(x=days, y=inc_prop, col=geno, shape=bk)+
geom_point()
mod_serie <- glmer(inc_prop ~ geno * days +
(1|bk) + (1|bk:geno),
weights=n_plants,
family="binomial",
data=dat)
plot_model(mod_serie,
terms = c("days", "geno"),
type='pred', show.data=T)
mod_serie0 <- glmer(inc_prop ~ days +
(1|bk) + (1|bk:geno),
weights=n_plants,
family="binomial",
data=dat)
mod_serie0 <- glmer(inc_prop ~ days +
(1|bk) + (1|bk:geno),
weights=n_plants,
family="binomial",
data=dat)
mod_serie1 <- glmer(inc_prop ~ days + geno +
(1|bk) + (1|bk:geno),
weights=n_plants,
family="binomial",
data=dat)
anova(mod_serie0, mod_serie1, mod_serie, test = "Chisq")
AIC(mod_serie0, mod_serie1, mod_serie)
tab_model(mod_serie)
df_predict = data.frame(geno=c("A", "B"), bk=2, days=150)
anova(mod_serie0, mod_serie1, mod_serie, test = "Chisq")
AIC(mod_serie0, mod_serie1, mod_serie)
tab_model(mod_serie)
plot_model(mod_serie0, type = "pred", terms = c("days", "roug"))
plot_model(mod_serie, type = "pred", terms = c("days", "roug"))
plot_model(mod_serie, type = "pred", terms = c("days", "geno"))
df_predict = data.frame(geno=c("A", "B"), bk=2, days=150)
predict(mod_serie,
newdata= df_predict,
type="response")
df_predict = data.frame(geno=c("A", "B"),
# bk=2,
days=150)
predict(mod_serie,
newdata= df_predict,
type="response")
mod_serie
pacman::p_load(DHARMa)
mod_serie %>% testOutliers()
mod_serie %>% testDispersion()
predict(mod_serie,
newdata= df_predict,
type="response")
df_predict = data.frame(geno=c("A", "B"),
bk=2,
days=150)
predict(mod_serie,
newdata= df_predict,
type="response")
df_predict = data.frame(geno=c("A", "B"),
bk=2,
days=100)
predict(mod_serie,
newdata= df_predict,
type="response")
# solo una evaluación a los 60 dias
dat_A <- dat %>%
filter(geno %in% c("A"))
raw <- rio::import("david/maracuya_geno.txt", header=TRUE) %>% tibble
dat <- raw %>%
# dplyr::select(-inc) %>%
# rio::export(file = "david/maracuya_roug.txt")
mutate_at(vars(geno, bk), as.factor) %>%
mutate(inc_prop=dis_plants/n_plants)  # %>%
dat %>%
ggplot() +
aes(x=days, y=inc_prop, col=geno, shape=bk)+
geom_point()+
geom_line(aes(group=interaction(bk,geno)))
# solo una evaluación a los 60 dias
dat_A <- dat %>%
filter(geno %in% c("A"))
# solo una evaluación a los 60 dias
dat1 <- dat %>%
filter(days %in% c(60))
# solo una evaluación a los 90 dias
dat2 <- dat %>%
filter(days %in% c(90))
# Dos evaluaciones: a los 60 y 90 dias
dat3 <- dat %>%
filter(days %in% c(60, 90)) # %>%
dat_A %>%
ggplot() +
aes(x=days, y=inc_prop, shape=bk)+
geom_point()+
geom_line(aes(group=interaction(bk,geno)))
mod_A <- glmer(inc_prop ~ days +
(1|bk) + (1|bk:geno),
weights=n_plants,
family="binomial",
data=dat_A)
dat_A
mod_A <- glmer(inc_prop ~ days + (1|bk) + (1|bk:geno),
weights=n_plants,
family="binomial",
data=dat_A)
dat <- raw %>%
# dplyr::select(-inc) %>%
# rio::export(file = "david/maracuya_roug.txt")
mutate_at(vars(geno, bk), as.factor) %>%
mutate(inc_prop=dis_plants/n_plants,
plot = interaction(bk,geno))  # %>%
dat
# solo una evaluación a los 60 dias
dat_A <- dat %>%
filter(geno %in% c("A"))
# solo una evaluación a los 60 dias
dat1 <- dat %>%
filter(days %in% c(60))
# solo una evaluación a los 90 dias
dat2 <- dat %>%
filter(days %in% c(90))
# Dos evaluaciones: a los 60 y 90 dias
dat3 <- dat %>%
filter(days %in% c(60, 90)) # %>%
# mutate_at(vars(days), as.factor)
mod_A <- glmer(inc_prop ~ days + (1|bk) + (1|plot),
weights=n_plants,
family="binomial",
data=dat_A)
mod_A <- glmer(inc_prop ~ days + (1|bk) + (1|plot),
weights = n_plants,
family = "binomial",
data=dat_A)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
mod_A <- glmer(inc_prop ~ days + (1|bk) + (1|plot),
weights = n_plants,
family = "binomial",
data=dat_A)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
pacman::p_load(tidyverse,  # manipulacion general de datos
lme4,       # ajuste de modelos mixtos
sjPlot,     # visualizacion de outputs
emmeans,    # estimacion de medias predichas por los modelos y comparaciones
multcomp)   # letras de test de comparaciones multiples
theme_set(theme_bw())
# agregamos una funcion de ploteado rapido
gghist <- function(x, e, m){
ggplot() +
aes(x)+
geom_histogram(binwidth=1, colour="gray30", fill="gray70") +
geom_vline(xintercept = e, col="blue")+
geom_vline(xintercept = m, col="red", linetype="dashed")
}
raw <- rio::import("david/maracuya_geno.txt", header=TRUE) %>% tibble
# raw <- rio::import("david/maracuya_geno.txt", header = TRUE) %>% tibble
dat <- raw %>%
# dplyr::select(-inc) %>%
# rio::export(file = "david/maracuya_roug.txt")
mutate_at(vars(geno, bk), as.factor) %>%
mutate(inc_prop=dis_plants/n_plants,
plot = interaction(bk,geno))  # %>%
dat %>%
ggplot() +
aes(x=days, y=inc_prop, col=geno, shape=bk)+
geom_point()+
geom_line(aes(group=interaction(bk,geno)))
# solo una evaluación a los 60 dias
dat_A <- dat %>%
filter(geno %in% c("A"))
# solo una evaluación a los 60 dias
dat1 <- dat %>%
filter(days %in% c(60))
# solo una evaluación a los 90 dias
dat2 <- dat %>%
filter(days %in% c(90))
# Dos evaluaciones: a los 60 y 90 dias
dat3 <- dat %>%
filter(days %in% c(60, 90)) # %>%
# mutate_at(vars(days), as.factor)
dat_A %>%
ggplot() +
aes(x=days, y=inc_prop, shape=bk)+
geom_point()+
geom_line(aes(group=interaction(bk,geno)))
mod_A <- glmer(inc_prop ~ days + (1|bk) + (1|plot),
weights = n_plants,
family = "binomial",
data=dat_A)
mod_A <- glmer(inc_prop ~ days + (1|bk) + (1|plot),
mod_A <- glmer(inc_prop ~ days + (1|bk) + (1|plot),
weights = n_plants,
family = "binomial",
data=dat_A,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
# solo una evaluación a los 60 dias
dat_B <- dat %>%
filter(geno %in% c("B"))
mod_A <- glmer(inc_prop ~ days + (1|bk) + (1|plot),
weights = n_plants,
family = "binomial",
data=dat_B)
mod_A <- glmer(inc_prop ~ days + (1|bk) + (1|plot),
weights = n_plants,
family = "binomial",
data=dat_B)
mod_A <- glmer(inc_prop ~ days + (1|plot),
weights = n_plants,
family = "binomial",
data=dat_B)
# solo una evaluación a los 60 dias
dat_B <- dat %>%
filter(geno %in% c("B")) %>%
filter(days %in% c(60, 90))
# solo una evaluación a los 60 dias
dat_A <- dat %>%
filter(geno %in% c("B")) %>%
filter(days %in% c(60, 90))
# solo una evaluación a los 60 dias
dat_A <- dat %>%
filter(geno %in% c("A")) %>%
filter(days %in% c(60, 90))
mod_A <- glmer(inc_prop ~ days + (1|plot),
weights = n_plants,
family = "binomial",
data=dat_B)
dat_A %>%
ggplot() +
aes(x=days, y=inc_prop, shape=bk)+
geom_point()+
geom_line(aes(group=interaction(bk,geno)))
# media_bin_3 = np
media_bin = 30*0.1
media_bin
# media_bin_3 = np
media_lote = 30*0.1
media_lote
# varianza_bin_3 = np(1−p)
varianza_lote =  30*0.1*(1-0.1)
varianza_lote
# media = np
media_field = 30*0.1
media_field
# varianza  = np(1−p)
varianza_field =  30*0.1*(1-0.1)
varianza_field
# sd = sqrt(np(1−p))
sd_field =  sqrt(30*0.1*(1-0.1))
sd_field
# solo una evaluación a los 60 dias
dat60 <- dat %>%
filter(days %in% c(60))
# solo una evaluación a los 90 dias
dat90 <- dat %>%
filter(days %in% c(90))
# Dos evaluaciones: a los 60 y 90 dias
dat60_90 <- dat %>%
filter(days %in% c(60, 90)) # %>%
# mutate_at(vars(days), as.factor)
dat60
dat60 %>%
ggplot() +
aes(x=geno, y=inc_prop) +
geom_jitter(alpha=.5, width=.02)
dat60 %>%
ggplot() +
aes(x=geno, y=inc_prop) +
geom_point(alpha=.5)
dat60 %>%
ggplot() +
aes(x=geno, y=inc_prop) +
geom_jitter(alpha=.5, width=.02)
mod1 <- glmer(
inc_prop ~ geno + (1|bk), # bloque como efecto aleatorio
weights=n_plants,
family="binomial",
data=dat60)
tab_model(mod1)
plot_model(mod1, type='pred', show.data=T,   bpe.color ="red")
head(dat)
dat %>%
ggplot() +
aes(x=days, y=inc_prop, col=geno, shape=bk)+
geom_point()
mod_serie <- glmer(inc_prop ~ geno * days +
(1|bk) + (1|bk:geno),    # aleatorio bk y parcela
weights=n_plants,
family="binomial",
data=dat)
plot_model(mod_serie,
terms = c("days", "geno"),
type='pred', show.data=T)
# Sacamos el efecto del genotipo
mod_serie0 <- glmer(inc_prop ~ days +
(1|bk) + (1|bk:geno),
weights=n_plants,
family="binomial",
data=dat)
mod_serie1 <- glmer(inc_prop ~ days + geno +
(1|bk) + (1|bk:geno),
weights=n_plants,
family="binomial",
data=dat)
anova(mod_serie0, mod_serie1, mod_serie, test = "Chisq")
AIC(mod_serie0, mod_serie1, mod_serie)
newdata <- with(dat, expand.grid(geno=unique(geno), days=unique(days)))
predict(mod_serie,newdata)
predict(mod_serie,newdata,re.form= ~(1|bk)) # explicitly specify RE
mod_serie <- glmer(inc_prop ~ geno * days +
(1|bk) + (1|bk:geno),    # aleatorio bk y parcela
weights=n_plants,
family="binomial",
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1000000)),
data=dat)
mod_serie <- glmer(inc_prop ~ geno * days +
(1|bk) + (1|bk:geno),    # aleatorio bk y parcela
weights=n_plants,
family="binomial",
data=dat)
newdata
ggpredict(mod_serie, "days")
library(ggeffects)
ggpredict(mod_serie, "days")
ggpredict(mod_serie, c("geno", "days"))
ggpredict(mod_serie, c( "days", "geno"))
ggpredict(mod_serie,
terms = "days [100]", condition = c(geno = "A"))
terms = "days [100]", condition = c(geno = c("A", "B"))
ggpredict(mod_serie,
terms = "days [100]", condition = c(geno = c("A", "B")))
ggpredict(mod_serie,
terms = "days [100:110]", condition = c(geno = c("A")))
ggpredict(mod_serie,
terms = "geno",
condition = c(days = "100"))
pacman::p_load(tidyverse,  # manipulacion general de datos
lme4,       # ajuste de modelos mixtos
DHARMa,     # diagnosticos
sjPlot,     # visualizacion de outputs
emmeans,    # estimacion de medias predichas por los modelos y comparaciones
ggeffects,  # predicciones
multcomp)   # letras de test de comparaciones multiples
theme_set(theme_bw())
# phom_raw <- import("https://raw.githubusercontent.com/juanchiem/agro_data/master/phomopsisp.csv") %>% tibble
phom_raw <- rio::import("madden/phomopsisp.csv", sep = ",") %>% tibble
phom_raw
phom_dat <- phom_raw %>%
mutate_at(vars(trt, bk), as.factor) %>%
mutate(inc=y/n)
phom_dat %>%
group_by(trt) %>%
skim(inc)
phom_dat %>%
ggplot() +
aes(x=trt, y = inc) +
geom_boxplot(alpha=.5, width = .2) +
geom_point(alpha=.7) +
labs(x="Tratamientos", y="Incidencia (proporción)")
mod_lm2 <- lmer(inc ~ trt + (1|bk), data=phom_dat)
check_normality(mod_lm2)
performance::check_normality(mod_lm2)
performance::check_homogeneity(mod_lm2)
mod_1 <- glmer(cbind(y, n-y) ~ trt + (1|bk),
family="binomial",
# weights = n,
data=phom_dat)
summary(mod_1)
phom_dat <- phom_raw %>%
mutate_at(vars(trt, bk), as.factor) %>%
mutate(inc=y/n)
phom_dat %>%
ggplot() +
aes(x=trt, y = inc) +
geom_boxplot(alpha=.5, width = .2) +
geom_point(alpha=.7) +
labs(x="Tratamientos", y="Incidencia (proporción)")
mod_phom1 <- glmer(cbind(y, n-y) ~ trt + (1|bk),
family="binomial",
# weights = n,
data=phom_dat)
mod_phom1 <- glmer(cbind(y, n-y) ~ trt + (1|bk),
family="binomial",
# weights = n,
data=phom_dat)
summary(mod_phom1)
mod_phom <- glmer(inc ~ trt + (1|bk),
family="binomial",
weights = n,
data=phom_dat)
mod_phom <- glmer(inc ~ trt + (1|bk),
family="binomial",
weights = n,
data=phom_dat)
summary(mod_phom)
tab_model(mod_phom1, mod_phom)
em1 <- emmeans(mod_phom, ~ trt, type="response")
em_phom <- emmeans(mod_phom, ~ trt, type="response")
res_phom <- cld(em_phom, Letters = letters, alpha = .05, type = "response")
knitr::kable(res_phom)
mod_phom2 <- glmer(inc ~ trt + (1|bk),
family="gaussian",
weights = n,
data=phom_dat)
mod_phom2 <- lmer(inc ~ trt + (1|bk), data=phom_dat)
summary(mod_phom2)
em_phom_LM <- emmeans(mod_phom, ~ trt, type="response")
em_phom_LM <- emmeans(mod_phom2, ~ trt, type="response")
em_phom_LM <- emmeans(mod_phom2, ~ trt, type="response")
res_phom_LM <- cld(em_phom_LM, Letters = letters, alpha = .05, type = "response")
knitr::kable(res_phom_LM)
knitr::kable(res_phom)
